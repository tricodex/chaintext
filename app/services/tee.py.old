import os
import json
import hashlib
import time
import base64
import subprocess
import asyncio
import requests
from typing import Dict, List, Any, Optional
from loguru import logger

from app.core.config import settings

class TEEAttestationGenerator:
    """
    Generates attestations for the Trusted Execution Environment (TEE)
    Supports both generic TPM attestations and Google Cloud vTPM attestations
    """
    
    def __init__(self):
        """Initialize the TEE attestation generator"""
        self.tpm_device = settings.TPM_DEVICE
        
        # Check if we're running in a confidential VM by looking for TPM device and metadata server
        self.attestation_enabled = os.path.exists(self.tpm_device)
        self.is_confidential_vm = self._check_confidential_vm()
        
        if self.is_confidential_vm:
            logger.info("Running in Google Cloud Confidential VM with vTPM support")
        elif self.attestation_enabled:
            logger.info(f"TEE attestation enabled with TPM device at {self.tpm_device}")
        else:
            logger.warning(f"TPM device not found at {self.tpm_device}. Using simulated attestations.")
    
    def _check_confidential_vm(self) -> bool:
        """Check if we're running in a Google Cloud Confidential VM"""
        try:
            # Try to access the metadata server with a small timeout
            response = requests.get(
                "http://metadata.google.internal/computeMetadata/v1/instance/attributes",
                headers={"Metadata-Flavor": "Google"},
                timeout=1
            )
            return response.status_code == 200
        except Exception:
            return False
    
    async def generate_attestation(self, query: str, context: List[Dict], response: Dict) -> Dict:
        """
        Generate TEE attestation for a response
        
        Args:
            query: The original query
            context: The context used to generate the response
            response: The generated response
            
        Returns:
            An attestation object with cryptographic proof
        """
        try:
            # Create a cryptographic hash of the inputs and outputs
            data_hash = self._create_hash(query, context, response)
            
            # Try to use Google Cloud vTPM attestation if available
            if self.is_confidential_vm:
                try:
                    # Generate a secure nonce for this attestation
                    nonce = base64.b64encode(os.urandom(16)).decode('utf-8')
                    
                    # Set audience to our own service name
                    audience = settings.APP_NAME
                    
                    # Fetch vTPM attestation token with nonce and audience
                    token = await self._fetch_attestation_token(audience=audience, nonce=nonce)
                    
                    if token:
                        # Process the token into header, payload, and signature
                        token_parts = self._process_jwt_token(token)
                        
                        if token_parts:
                            # Create the attestation object with vTPM JWT token
                            return {
                                "token": token,
                                "header": token_parts["header"],
                                "payload": token_parts["payload"],
                                "signature": token_parts["signature"],
                                "data_hash": data_hash,
                                "digest": token_parts["digest"],
                                "timestamp": int(time.time()),
                                "simulated": False,
                                "type": "gcp_vtpm"
                            }
                        else:
                            logger.warning("Failed to process vTPM attestation token, falling back to TPM-based attestation")
                    else:
                        logger.warning("Failed to fetch vTPM attestation token, falling back to TPM-based attestation")
                except Exception as e:
                    logger.error(f"Error using vTPM attestation: {e}, falling back to TPM-based attestation")
            
            # If we couldn't use vTPM attestation, try regular TPM
            if self.attestation_enabled:
                # Use TPM-based attestation
                pcr_measurement = await self._get_pcr_measurement(23)
                nonce = os.urandom(16)
                quote = await self._generate_quote(nonce, pcr_measurement)
                signature = await self._sign_data(data_hash)
                
                # Create the attestation object with TPM quote
                attestation = {
                    "quote": quote,
                    "data_hash": data_hash,
                    "signature": signature,
                    "timestamp": int(time.time()),
                    "nonce": nonce.hex(),
                    "simulated": False,
                    "type": "tpm"
                }
            else:
                # Simulate TPM operations
                pcr_measurement = hashlib.sha256(f"PCR23-{time.time()}".encode()).hexdigest()
                nonce = os.urandom(16)
                quote = self._simulate_quote(nonce, pcr_measurement)
                signature = self._simulate_signature(data_hash)
                
                # Create the attestation object with simulated quote
                attestation = {
                    "quote": quote,
                    "data_hash": data_hash,
                    "signature": signature,
                    "timestamp": int(time.time()),
                    "nonce": nonce.hex(),
                    "simulated": True,
                    "type": "simulated"
                }
            
            return attestation
        except Exception as e:
            logger.error(f"Error generating attestation: {e}")
            # Return a placeholder attestation on error
            return {
                "error": str(e),
                "timestamp": int(time.time()),
                "simulated": True
            }
    
    def _create_hash(self, query: str, context: List[Dict], response: Dict) -> str:
        """Create a cryptographic hash of the inputs and outputs"""
        # Create a deterministic representation of the data
        data = {
            "query": query,
            "context_ids": [ctx.get("id", "") for ctx in context],
            "response": response,
            "timestamp": int(time.time())
        }
        
        # Sort keys for deterministic serialization
        return hashlib.sha256(json.dumps(data, sort_keys=True).encode()).hexdigest()
    
    async def _get_pcr_measurement(self, pcr_index: int) -> str:
        """Get PCR measurement from TPM (simplified simulation)"""
        if not self.attestation_enabled:
            return hashlib.sha256(f"PCR{pcr_index}-{time.time()}".encode()).hexdigest()
        
        try:
            # In a real implementation, we would use TPM2 tools to read PCR
            # For the hackathon, we'll simulate this
            measurement = hashlib.sha256(f"PCR{pcr_index}-{time.time()}".encode()).hexdigest()
            return measurement
        except Exception as e:
            logger.error(f"Error reading PCR {pcr_index}: {e}")
            raise RuntimeError(f"TPM PCR read failed: {e}")
    
    async def _generate_quote(self, nonce: bytes, pcr_value: str) -> str:
        """Generate a quote with the given nonce and PCR value"""
        if not self.attestation_enabled:
            return self._simulate_quote(nonce, pcr_value)
        
        try:
            # In a real implementation, we would use TPM2 tools to generate a quote
            # For the hackathon, we'll simulate this
            quote_data = f"QUOTE-{nonce.hex()}-{pcr_value}-{time.time()}".encode()
            return base64.b64encode(quote_data).decode()
        except Exception as e:
            logger.error(f"Error generating quote: {e}")
            raise RuntimeError(f"TPM quote generation failed: {e}")
    
    async def _sign_data(self, data_hash: str) -> str:
        """Sign a hash with the TPM key"""
        if not self.attestation_enabled:
            return self._simulate_signature(data_hash)
        
        try:
            # In a real implementation, we would use TPM2 tools to sign data
            # For the hackathon, we'll simulate this
            signature = f"SIG-{data_hash}-{time.time()}".encode()
            return base64.b64encode(signature).decode()
        except Exception as e:
            logger.error(f"Error signing hash: {e}")
            raise RuntimeError(f"TPM signing failed: {e}")
    
    def _simulate_quote(self, nonce: bytes, pcr_value: str) -> str:
        """Simulate a TPM quote for development/testing"""
        quote_data = f"SIM-QUOTE-{nonce.hex()}-{pcr_value}-{time.time()}".encode()
        return base64.b64encode(quote_data).decode()
    
    def _simulate_signature(self, data_hash: str) -> str:
        """Simulate a TPM signature for development/testing"""
        signature = f"SIM-SIG-{data_hash}-{time.time()}".encode()
        return base64.b64encode(signature).decode()
    
    async def _fetch_attestation_token(self, audience: str = None, nonce: str = None) -> Optional[str]:
        """Fetch an attestation token from the Google Cloud Metadata Server
        
        Args:
            audience: The intended audience for the token (used for verification)
            nonce: A nonce to prevent replay attacks
            
        Returns:
            The attestation token if successful, None otherwise
        """
        try:
            # The attestation endpoint is available at a well-known location in Confidential VMs
            attestation_url = "http://metadata.google.internal/computeMetadata/v1/instance/attestation-token"
            
            # The request must include the Metadata-Flavor header
            headers = {"Metadata-Flavor": "Google"}
            
            # Prepare query parameters for audience and nonce if provided
            params = {}
            if audience:
                params['audience'] = audience
            if nonce:
                params['nonce'] = nonce
            else:
                # Generate a secure random nonce if not provided
                params['nonce'] = base64.b64encode(os.urandom(16)).decode('utf-8')
            
            logger.debug(f"Requesting attestation token with params: {params}")
            
            # Make the request with parameters
            response = requests.get(
                attestation_url, 
                headers=headers, 
                params=params,
                timeout=5
            )
            
            # Check if the request was successful
            if response.status_code == 200:
                logger.info("Successfully fetched vTPM attestation token")
                return response.text
            else:
                logger.error(f"Failed to get attestation token: {response.status_code}")
                return None
        except Exception as e:
            logger.error(f"Error fetching attestation token: {e}")
            return None
    
    def _process_jwt_token(self, token: str) -> Optional[Dict[str, str]]:
        """Process a JWT token into header, payload, and signature"""
        try:
            # Split the JWT token into parts
            header_b64, payload_b64, signature_b64 = token.split(".")
            
            # Function to decode Base64URL
            def base64url_decode(input_str: str) -> bytes:
                # Add padding if needed
                padding = "=" * (4 - (len(input_str) % 4))
                input_str = input_str.replace("-", "+").replace("_", "/")
                return base64.b64decode(input_str + padding)
            
            # Decode the parts
            header = base64url_decode(header_b64)
            payload = base64url_decode(payload_b64)
            signature = base64url_decode(signature_b64)
            
            # Convert to hex for the contract
            header_hex = "0x" + header.hex()
            payload_hex = "0x" + payload.hex()
            signature_hex = "0x" + signature.hex()
            
            # Calculate the digest
            message = f"{header_b64}.{payload_b64}".encode()
            digest = "0x" + hashlib.sha256(message).hexdigest()
            
            # Log some information about the token
            try:
                header_json = json.loads(header)
                payload_json = json.loads(payload)
                logger.debug(f"JWT header: {header_json}")
                logger.debug(f"JWT payload issuer: {payload_json.get('iss')}")
                logger.debug(f"JWT signature length: {len(signature)}")
            except json.JSONDecodeError:
                logger.warning("Could not decode JWT parts as JSON")
            
            return {
                "header": header_hex,
                "payload": payload_hex,
                "signature": signature_hex,
                "digest": digest
            }
        except Exception as e:
            logger.error(f"Error processing JWT token: {e}")
            return None


class OnChainVerifier:
    """
    Verifies TEE attestations on the Flare blockchain
    Supports both generic TEE and vTPM attestations
    """
    
    def __init__(self, web3_provider: Optional[str] = None):
        """Initialize the on-chain verifier"""
        from web3 import Web3
        
        self.web3_provider = web3_provider or settings.WEB3_PROVIDER_URI
        self.web3 = Web3(Web3.HTTPProvider(self.web3_provider))
        self.tee_verifier_address = settings.TEE_VERIFIER_ADDRESS
        self.flare_vtpm_address = settings.FLARE_VTPM_ATTESTATION_ADDRESS
        
        # Load TEE verifier ABI
        try:
            with open('app/data/tee_verifier_abi.json', 'r') as f:
                self.tee_verifier_abi = json.load(f)
            logger.info("Loaded TEE verifier ABI from file")
            
            # Initialize contract if address is set
            if self.tee_verifier_address and self.tee_verifier_address != "0x0000000000000000000000000000000000000000":
                self.tee_verifier = self.web3.eth.contract(
                    address=self.tee_verifier_address,
                    abi=self.tee_verifier_abi
                )
                logger.info(f"Initialized TEE verifier contract at {self.tee_verifier_address}")
            else:
                logger.warning("TEE verifier address not set or is zero address. Using simulated verification.")
                self.tee_verifier = None
        except Exception as e:
            logger.warning(f"Could not load TEE verifier ABI: {e}")
            self.tee_verifier = None
        
        # Load Flare vTPM Attestation ABI
        try:
            with open('app/data/flare_vtpm_attestation_abi.json', 'r') as f:
                self.flare_vtpm_abi = json.load(f)
            logger.info("Loaded Flare vTPM Attestation ABI from file")
            
            # Initialize contract if address is set
            if self.flare_vtpm_address and self.flare_vtpm_address != "0x0000000000000000000000000000000000000000":
                self.flare_vtpm_contract = self.web3.eth.contract(
                    address=self.flare_vtpm_address,
                    abi=self.flare_vtpm_abi
                )
                logger.info(f"Initialized Flare vTPM Attestation contract at {self.flare_vtpm_address}")
            else:
                logger.warning("Flare vTPM Attestation address not set or is zero address. Using simulated verification.")
                self.flare_vtpm_contract = None
        except Exception as e:
            logger.warning(f"Could not load Flare vTPM Attestation ABI: {e}")
            self.flare_vtpm_contract = None
            
        logger.info(f"Initialized OnChainVerifier with provider: {self.web3_provider}")
    
    async def verify_attestation(self, attestation: Dict) -> Dict:
        """
        Verify an attestation using the appropriate contract on Flare
        
        Args:
            attestation: The attestation object to verify
            
        Returns:
            A verification result with status and details
        """
        try:
            # Check if this is a simulated attestation
            if attestation.get("simulated", True):
                logger.info("Simulating verification for a simulated attestation")
                return {
                    "verified": True,
                    "simulated": True,
                    "timestamp": int(time.time()),
                    "transaction_hash": "0x" + "0" * 64,  # Dummy transaction hash
                    "type": "simulated"
                }
            
            # Check attestation type to determine which contract to use
            attestation_type = attestation.get("type", "tpm")
            
            # Handle vTPM attestation
            if attestation_type == "gcp_vtpm" and self.flare_vtpm_contract:
                try:
                    # Call the FlareVtpmAttestation contract with vTPM token parts
                    logger.info("Verifying vTPM attestation with FlareVtpmAttestation contract")
                    
                    # Extract header, payload, and signature from attestation
                    header = attestation.get("header")
                    payload = attestation.get("payload")
                    signature = attestation.get("signature")
                    
                    if not all([header, payload, signature]):
                        logger.error("Missing required vTPM attestation components")
                        return {
                            "verified": False,
                            "error": "Missing required vTPM attestation components",
                            "timestamp": int(time.time()),
                            "type": "gcp_vtpm"
                        }
                    
                    # Call the verifyAndAttest function (as read-only call)
                    verification_result = await asyncio.to_thread(
                        self.flare_vtpm_contract.functions.verifyAndAttest(
                            header,
                            payload,
                            signature
                        ).call
                    )
                    
                    # Create transaction hash (this would be from the actual transaction in a real implementation)
                    tx_hash = "0x" + hashlib.sha256(f"{attestation.get('digest', '')}-{time.time()}".encode()).hexdigest()[:64]
                    
                    return {
                        "verified": verification_result,
                        "simulated": False,
                        "timestamp": int(time.time()),
                        "transaction_hash": tx_hash,
                        "type": "gcp_vtpm"
                    }
                except Exception as vTPM_err:
                    logger.error(f"Error calling FlareVtpmAttestation contract: {vTPM_err}")
                    # We'll fall through to simulation below
            
            # Handle regular TPM attestation
            elif attestation_type == "tpm" and self.tee_verifier:
                try:
                    # Call the TeeV1Verifier contract with attestation data
                    logger.info("Verifying TPM attestation with TeeV1Verifier contract")
                    
                    # Use asyncio.to_thread to run the contract call in a separate thread
                    verification_result = await asyncio.to_thread(
                        self.tee_verifier.functions.verifyAttestation(
                            attestation.get("quote", ""),
                            attestation.get("data_hash", ""),
                            attestation.get("timestamp", 0),
                            attestation.get("signature", "")
                        ).call
                    )
                    
                    # Create transaction hash (this would be from the actual transaction in a real implementation)
                    tx_hash = "0x" + hashlib.sha256(f"{attestation.get('data_hash', '')}-{time.time()}".encode()).hexdigest()[:64]
                    
                    return {
                        "verified": verification_result,
                        "simulated": False,
                        "timestamp": int(time.time()),
                        "transaction_hash": tx_hash,
                        "type": "tpm"
                    }
                except Exception as contract_err:
                    logger.error(f"Error calling TEE verifier contract: {contract_err}")
                    # Fall back to simulation
                    pass
            
            # If we reached here, either there's no contract or the call failed
            # Simulate verification for the hackathon
            logger.info(f"Using simulated verification for attestation type: {attestation_type}")
            import random
            verification_success = random.random() > 0.1  # Simulate a 10% chance of failure
            
            return {
                "verified": verification_success,
                "simulated": True,
                "timestamp": int(time.time()),
                "transaction_hash": "0x" + hashlib.sha256(f"{time.time()}".encode()).hexdigest()[:64],
                "type": attestation_type
            }
        except Exception as e:
            logger.error(f"Error verifying attestation: {e}")
            return {
                "verified": False,
                "error": str(e),
                "timestamp": int(time.time()),
                "type": attestation.get("type", "unknown")
            }
